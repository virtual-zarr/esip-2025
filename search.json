[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "VirtualiZarr examples",
    "section": "",
    "text": "This workshop will include a mostly self-guided exploration of VirtualiZarr 2.0 for either pre-constructed examples or your own data.\nYou can find out more about VirtualiZarr on readthedocs and explore the source code on GitHub. If you’re familiar with VirtualiZarr 1.0, check out the migration guide for information about how this new release differs.\nYou can download the source code from GitHub:\ngit clone git@github.com:virtual-zarr/esip-2025.git\ncd esip-2025\nYou can use pixi to create an environment for these examples. After installing pixi, create an environment from the lock file via:\npixi install",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "VirtualiZarr examples",
    "section": "",
    "text": "This workshop will include a mostly self-guided exploration of VirtualiZarr 2.0 for either pre-constructed examples or your own data.\nYou can find out more about VirtualiZarr on readthedocs and explore the source code on GitHub. If you’re familiar with VirtualiZarr 1.0, check out the migration guide for information about how this new release differs.\nYou can download the source code from GitHub:\ngit clone git@github.com:virtual-zarr/esip-2025.git\ncd esip-2025\nYou can use pixi to create an environment for these examples. After installing pixi, create an environment from the lock file via:\npixi install",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "VirtualiZarr examples",
    "section": "License",
    "text": "License\nContent in this repository is licensed under the MIT License.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "examples/01_AWS_Public_Data_Program_NetCDF.html",
    "href": "examples/01_AWS_Public_Data_Program_NetCDF.html",
    "title": "Walk-through - Virtualizing NetCDFs from Amazon’s Open Data Program",
    "section": "",
    "text": "Let’s start with the first example from the VirtualiZarr homepage.\nThis example uses the NASA Earth Exchange Global Daily Downscaled Projections (NEX-GDDP-CMIP6) from the Registry of Open Data on AWS. The virtualization process will be much faster if run proximal to the data in AWS’s us-west-2 region.\nCreating the virtual dataset looks quite similar to how we normally open data with xarray, but there are a few notable differences that are shown through this example.\nFirst, import the necessary functions and classes:\n\nimport icechunk\nimport obstore\nimport xarray as xr\nfrom virtualizarr import open_virtual_dataset, open_virtual_mfdataset\nfrom virtualizarr.parsers import HDFParser\nfrom virtualizarr.registry import ObjectStoreRegistry\n\nZarr can emit a lot of warnings about Numcodecs not being including in the Zarr version 3 specification yet – let’s suppress those.\n\nimport warnings\n\nwarnings.filterwarnings(\n    \"ignore\",\n    message=\"Numcodecs codecs are not in the Zarr version 3 specification*\",\n    category=UserWarning,\n)\n\nWe can use Obstore’s obstore.store.from_url convenience method to create an ObjectStore that can fetch data from the specified URLs.\n\nbucket = \"s3://nex-gddp-cmip6\"\npath = \"NEX-GDDP-CMIP6/ACCESS-CM2/ssp126/r1i1p1f1/tasmax/tasmax_day_ACCESS-CM2_ssp126_r1i1p1f1_gn_2015_v2.0.nc\"\nstore = obstore.store.from_url(bucket, region=\"us-west-2\", skip_signature=True)\n\nWe also need to create an ObjectStoreRegistry that maps the URL structure to the ObjectStore.\n\nregistry = ObjectStoreRegistry({bucket: store})\n\nNow, let’s create a parser instance and create a virtual dataset by passing the URL, parser, and registry to virtualizarr.open_virtual_dataset.\n\nparser = HDFParser()\nvds = open_virtual_dataset(\n    url=f\"{bucket}/{path}\",\n    parser=parser,\n    registry=registry,\n    loadable_variables=[],\n)\nprint(vds)\n\n&lt;xarray.Dataset&gt; Size: 1GB\nDimensions:  (time: 365, lat: 600, lon: 1440)\nCoordinates:\n    time     (time) float64 3kB ManifestArray&lt;shape=(365,), dtype=float64, ch...\n    lat      (lat) float64 5kB ManifestArray&lt;shape=(600,), dtype=float64, chu...\n    lon      (lon) float64 12kB ManifestArray&lt;shape=(1440,), dtype=float64, c...\nData variables:\n    tasmax   (time, lat, lon) float32 1GB ManifestArray&lt;shape=(365, 600, 1440...\nAttributes: (12/22)\n    cmip6_source_id:       ACCESS-CM2\n    cmip6_institution_id:  CSIRO-ARCCSS\n    cmip6_license:         CC-BY-SA 4.0\n    activity:              NEX-GDDP-CMIP6\n    Conventions:           CF-1.7\n    frequency:             day\n    ...                    ...\n    doi:                   https://doi.org/10.7917/OFSG3345\n    external_variables:    areacella\n    contact:               Dr. Bridget Thrasher: bridget@climateanalyticsgrou...\n    creation_date:         Sat Nov 16 13:31:18 PST 2024\n    disclaimer:            These data are considered provisional and subject ...\n    tracking_id:           d4b2123b-abf9-4c3c-a780-58df6ce4e67f\n\n\nSince we specified loadable_variables=[], no data has been loaded or copied in this process. We have merely created an in-memory lookup table that points to the location of chunks in the original netCDF when data is needed later on. The default behavior (loadable_variables=None) will load data associated with coordinates but not data variables. The size represents the size of the original dataset - you can see the size of the virtual dataset using the vz accessor:\n\nprint(f\"Original dataset size: {vds.nbytes} bytes\")\nprint(f\"Virtual dataset size: {vds.vz.nbytes} bytes\")\n\nOriginal dataset size: 1261459240 bytes\nVirtual dataset size: 11776 bytes\n\n\nVirtualiZarr’s other top-level function is virtualizarr.open_virtual_mfdataset, which can open and virtualize multiple data sources into a single virtual dataset, similar to how xarray.open_mfdataset opens multiple data files as a single dataset.\n\nurls = [\n    f\"s3://nex-gddp-cmip6/NEX-GDDP-CMIP6/ACCESS-CM2/ssp126/r1i1p1f1/tasmax/tasmax_day_ACCESS-CM2_ssp126_r1i1p1f1_gn_{year}_v2.0.nc\"\n    for year in range(2015, 2017)\n]\nvds = open_virtual_mfdataset(urls, parser=parser, registry=registry)\nprint(vds)\n\n&lt;xarray.Dataset&gt; Size: 3GB\nDimensions:  (time: 731, lat: 600, lon: 1440)\nCoordinates:\n  * time     (time) datetime64[ns] 6kB 2015-01-01T12:00:00 ... 2016-12-31T12:...\n  * lat      (lat) float64 5kB -59.88 -59.62 -59.38 -59.12 ... 89.38 89.62 89.88\n  * lon      (lon) float64 12kB 0.125 0.375 0.625 0.875 ... 359.4 359.6 359.9\nData variables:\n    tasmax   (time, lat, lon) float32 3GB ManifestArray&lt;shape=(731, 600, 1440...\nAttributes: (12/22)\n    cmip6_source_id:       ACCESS-CM2\n    cmip6_institution_id:  CSIRO-ARCCSS\n    cmip6_license:         CC-BY-SA 4.0\n    activity:              NEX-GDDP-CMIP6\n    Conventions:           CF-1.7\n    frequency:             day\n    ...                    ...\n    doi:                   https://doi.org/10.7917/OFSG3345\n    external_variables:    areacella\n    contact:               Dr. Bridget Thrasher: bridget@climateanalyticsgrou...\n    creation_date:         Sat Nov 16 13:31:18 PST 2024\n    disclaimer:            These data are considered provisional and subject ...\n    tracking_id:           d4b2123b-abf9-4c3c-a780-58df6ce4e67f\n\n\nThe magic of VirtualiZarr is that you can persist the virtual dataset to disk in a chunk references format such as Icechunk, meaning that the work of constructing the single coherent dataset only needs to happen once. For subsequent data access, you can use xarray.open_zarr to open that Icechunk store, which on object storage is far faster than using xarray.open_mfdataset to open the the original non-cloud-optimized files.\nLet’s persist the Virtual dataset using Icechunk. Here we store the dataset in a memory store but in most cases you’ll store the virtual dataset in the cloud.\n\nicechunk_store = icechunk.in_memory_storage()\nrepo = icechunk.Repository.create(icechunk_store)\nsession = repo.writable_session(\"main\")\nvds.vz.to_icechunk(session.store)\nsession.commit(\"Create virtual store\")\n\n'NMNW069WM3CYHXFPW4F0'\n\n\nLastly, let’s show what it looks like to re-use this serialized virtual store.\n\nsession = repo.readonly_session(\"main\")\n\n\nxr.open_zarr(session.store, zarr_format=3, consolidated=False)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 3GB\nDimensions:  (lat: 600, lon: 1440, time: 731)\nCoordinates:\n  * lat      (lat) float64 5kB -59.88 -59.62 -59.38 -59.12 ... 89.38 89.62 89.88\n  * lon      (lon) float64 12kB 0.125 0.375 0.625 0.875 ... 359.4 359.6 359.9\n  * time     (time) datetime64[ns] 6kB 2015-01-01T12:00:00 ... 2016-12-31T12:...\nData variables:\n    tasmax   (time, lat, lon) float32 3GB ...\nAttributes: (12/22)\n    cmip6_source_id:       ACCESS-CM2\n    cmip6_institution_id:  CSIRO-ARCCSS\n    cmip6_license:         CC-BY-SA 4.0\n    activity:              NEX-GDDP-CMIP6\n    Conventions:           CF-1.7\n    frequency:             day\n    ...                    ...\n    doi:                   https://doi.org/10.7917/OFSG3345\n    external_variables:    areacella\n    contact:               Dr. Bridget Thrasher: bridget@climateanalyticsgrou...\n    creation_date:         Sat Nov 16 13:31:18 PST 2024\n    disclaimer:            These data are considered provisional and subject ...\n    tracking_id:           d4b2123b-abf9-4c3c-a780-58df6ce4e67fxarray.DatasetDimensions:lat: 600lon: 1440time: 731Coordinates: (3)lat(lat)float64-59.88 -59.62 ... 89.62 89.88units :degrees_northlong_name :Latitudearray([-59.875, -59.625, -59.375, ...,  89.375,  89.625,  89.875], shape=(600,))lon(lon)float640.125 0.375 0.625 ... 359.6 359.9units :degrees_eastlong_name :Longitudearray([1.25000e-01, 3.75000e-01, 6.25000e-01, ..., 3.59375e+02, 3.59625e+02,\n       3.59875e+02], shape=(1440,))time(time)datetime64[ns]2015-01-01T12:00:00 ... 2016-12-...axis :Tlong_name :timestandard_name :timebounds :time_bndsarray(['2015-01-01T12:00:00.000000000', '2015-01-02T12:00:00.000000000',\n       '2015-01-03T12:00:00.000000000', ..., '2016-12-29T12:00:00.000000000',\n       '2016-12-30T12:00:00.000000000', '2016-12-31T12:00:00.000000000'],\n      shape=(731,), dtype='datetime64[ns]')Data variables: (1)tasmax(time, lat, lon)float32...time :60265.5standard_name :air_temperaturelong_name :Daily Maximum Near-Surface Air Temperatureunits :Kcomment :maximum near-surface (usually, 2 meter) air temperature (add cell_method attribute 'time: max')cell_methods :area: mean time: maximumcell_measures :area: areacellahistory :2019-11-08T10:48:26Z altered by CMOR: Treated scalar dimension: 'height'. 2019-11-08T10:48:26Z altered by CMOR: replaced missing value flag (-1.07374e+09) with standard missing value (1e+20).[631584000 values with dtype=float32]Indexes: (3)latPandasIndexPandasIndex(Index([-59.875, -59.625, -59.375, -59.125, -58.875, -58.625, -58.375, -58.125,\n       -57.875, -57.625,\n       ...\n        87.625,  87.875,  88.125,  88.375,  88.625,  88.875,  89.125,  89.375,\n        89.625,  89.875],\n      dtype='float64', name='lat', length=600))lonPandasIndexPandasIndex(Index([  0.125,   0.375,   0.625,   0.875,   1.125,   1.375,   1.625,   1.875,\n         2.125,   2.375,\n       ...\n       357.625, 357.875, 358.125, 358.375, 358.625, 358.875, 359.125, 359.375,\n       359.625, 359.875],\n      dtype='float64', name='lon', length=1440))timePandasIndexPandasIndex(DatetimeIndex(['2015-01-01 12:00:00', '2015-01-02 12:00:00',\n               '2015-01-03 12:00:00', '2015-01-04 12:00:00',\n               '2015-01-05 12:00:00', '2015-01-06 12:00:00',\n               '2015-01-07 12:00:00', '2015-01-08 12:00:00',\n               '2015-01-09 12:00:00', '2015-01-10 12:00:00',\n               ...\n               '2016-12-22 12:00:00', '2016-12-23 12:00:00',\n               '2016-12-24 12:00:00', '2016-12-25 12:00:00',\n               '2016-12-26 12:00:00', '2016-12-27 12:00:00',\n               '2016-12-28 12:00:00', '2016-12-29 12:00:00',\n               '2016-12-30 12:00:00', '2016-12-31 12:00:00'],\n              dtype='datetime64[ns]', name='time', length=731, freq=None))Attributes: (22)cmip6_source_id :ACCESS-CM2cmip6_institution_id :CSIRO-ARCCSScmip6_license :CC-BY-SA 4.0activity :NEX-GDDP-CMIP6Conventions :CF-1.7frequency :dayinstitution :NASA Earth Exchange, NASA Ames Research Center, Moffett Field, CA 94035variant_label :r1i1p1f1product :outputrealm :atmossource :BCSDscenario :ssp126references :BCSD method: Thrasher et al., 2012, Hydrol. Earth Syst. Sci.,16, 3309-3314. Ref period obs: latest version of the Princeton Global Meteorological Forcings (http://hydrology.princeton.edu/data.php), based on Sheffield et al., 2006, J. Climate, 19 (13), 3088-3111.version :2.0title :ACCESS-CM2, r1i1p1f1, ssp126, global downscaled CMIP6 climate projection dataresolution_id :0.25 degreedoi :https://doi.org/10.7917/OFSG3345external_variables :areacellacontact :Dr. Bridget Thrasher: bridget@climateanalyticsgroup.org, Dr. Ian Brosnan: ian.g.brosnan@nasa.govcreation_date :Sat Nov 16 13:31:18 PST 2024disclaimer :These data are considered provisional and subject to change. They are provided as is without any warranty of any kind, either express or implied, arising by law or otherwise, including but not limited to warranties of completeness, non-infringement, accuracy, merchantability, or fitness for a particular purpose. The user assumes all risk associated with the use of, or inability to use, these data.tracking_id :d4b2123b-abf9-4c3c-a780-58df6ce4e67f",
    "crumbs": [
      "Examples",
      "Walk through - NetCDFs on AWS"
    ]
  },
  {
    "objectID": "examples/02_ESGF_NetCDF_Solution.html",
    "href": "examples/02_ESGF_NetCDF_Solution.html",
    "title": "Hands-on - Virtualize NetCDF from ESGF",
    "section": "",
    "text": "This example uses data from the Earth System Grid Federation THREDDS Data Server.\nThis is a quicker example for hands-on experience. For a full walkthrough, view previous example on the NASA-NEX-GDDP CMIP6 data.\nThank you to Raphael Hagen for contributing this example!\n\nStep 1: Import necessary functions and classes\n\nimport icechunk\nfrom obstore.store import HTTPStore\nfrom virtualizarr import open_virtual_dataset\nfrom virtualizarr.parsers import HDFParser\nfrom virtualizarr.registry import ObjectStoreRegistry\n\n\n\nStep 2: Define data location\n\nbucket = \"https://esgf-data.ucar.edu\"\npath = \"thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2/historical/r3i1p1f1/day/tas/gn/v20190308/tas_day_CESM2_historical_r3i1p1f1_gn_19200101-19291231.nc\"\n\n\n\nStep 3: Create an ObjectStore and an ObjectStoreRegistry\n\nstore = HTTPStore.from_url(bucket)\nregistry = ObjectStoreRegistry({bucket: store})\n\n\n\nStep 4: Create an instance of the HDFParser\n\nparser = HDFParser()\n\n\n\nStep 5: Create a virtual dataset via open_virtual_dataset\n\nvds = open_virtual_dataset(\n    url=f\"{bucket}/{path}\",\n    parser=parser,\n    registry=registry,\n    loadable_variables=[\"lat\", \"lon\", \"time\", \"time_bnds\", \"lat_bnds\", \"lon_bnds\"],\n)\n\n/home/jovyan/Code/virtual-zarr/esip-2025/.pixi/envs/default/lib/python3.13/site-packages/numcodecs/zarr3.py:145: UserWarning: Numcodecs codecs are not in the Zarr version 3 specification and may not be supported by other zarr implementations.\n  super().__init__(**codec_config)\n/home/jovyan/Code/virtual-zarr/esip-2025/.pixi/envs/default/lib/python3.13/site-packages/xarray/conventions.py:204: SerializationWarning: variable 'tas' has multiple fill values {np.float64(1.0000000200408773e+20), np.float64(1e+20)} defined, decoding all values to NaN.\n  var = coder.decode(var, name=name)\n\n\n\nvds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 807MB\nDimensions:    (lat: 192, lon: 288, time: 3650, nbnd: 2)\nCoordinates:\n  * lat        (lat) float64 2kB -90.0 -89.06 -88.12 -87.17 ... 88.12 89.06 90.0\n  * lon        (lon) float64 2kB 0.0 1.25 2.5 3.75 ... 355.0 356.2 357.5 358.8\n  * time       (time) object 29kB 1920-01-01 00:00:00 ... 1929-12-31 00:00:00\nDimensions without coordinates: nbnd\nData variables:\n    time_bnds  (time, nbnd) object 58kB ...\n    lat_bnds   (lat, nbnd) float32 2kB ...\n    lon_bnds   (lon, nbnd) float32 2kB ...\n    tas        (time, lat, lon) float32 807MB ManifestArray&lt;shape=(3650, 192,...\nAttributes: (12/45)\n    Conventions:            CF-1.7 CMIP-6.2\n    activity_id:            CMIP\n    case_id:                17\n    cesm_casename:          b.e21.BHIST.f09_g17.CMIP6-historical.003\n    contact:                cesm_cmip6@ucar.edu\n    creation_date:          2019-01-18T16:46:02Z\n    ...                     ...\n    sub_experiment:         none\n    sub_experiment_id:      none\n    branch_time_in_parent:  240900.0\n    branch_time_in_child:   674885.0\n    branch_method:          standard\n    further_info_url:       https://furtherinfo.es-doc.org/CMIP6.NCAR.CESM2.h...xarray.DatasetDimensions:lat: 192lon: 288time: 3650nbnd: 2Coordinates: (3)lat(lat)float64-90.0 -89.06 -88.12 ... 89.06 90.0axis :Ybounds :lat_bndsstandard_name :latitudetitle :Latitudetype :doubleunits :degrees_northvalid_max :90.0valid_min :-90.0array([-90.      , -89.057592, -88.115183, -87.172775, -86.230366, -85.287958,\n       -84.34555 , -83.403141, -82.460733, -81.518325, -80.575916, -79.633508,\n       -78.691099, -77.748691, -76.806283, -75.863874, -74.921466, -73.979058,\n       -73.036649, -72.094241, -71.151832, -70.209424, -69.267016, -68.324607,\n       -67.382199, -66.439791, -65.497382, -64.554974, -63.612565, -62.670157,\n       -61.727749, -60.78534 , -59.842932, -58.900524, -57.958115, -57.015707,\n       -56.073298, -55.13089 , -54.188482, -53.246073, -52.303665, -51.361257,\n       -50.418848, -49.47644 , -48.534031, -47.591623, -46.649215, -45.706806,\n       -44.764398, -43.82199 , -42.879581, -41.937173, -40.994764, -40.052356,\n       -39.109948, -38.167539, -37.225131, -36.282723, -35.340314, -34.397906,\n       -33.455497, -32.513089, -31.570681, -30.628272, -29.685864, -28.743455,\n       -27.801047, -26.858639, -25.91623 , -24.973822, -24.031414, -23.089005,\n       -22.146597, -21.204188, -20.26178 , -19.319372, -18.376963, -17.434555,\n       -16.492147, -15.549738, -14.60733 , -13.664921, -12.722513, -11.780105,\n       -10.837696,  -9.895288,  -8.95288 ,  -8.010471,  -7.068063,  -6.125654,\n        -5.183246,  -4.240838,  -3.298429,  -2.356021,  -1.413613,  -0.471204,\n         0.471204,   1.413613,   2.356021,   3.298429,   4.240838,   5.183246,\n         6.125654,   7.068063,   8.010471,   8.95288 ,   9.895288,  10.837696,\n        11.780105,  12.722513,  13.664921,  14.60733 ,  15.549738,  16.492147,\n        17.434555,  18.376963,  19.319372,  20.26178 ,  21.204188,  22.146597,\n        23.089005,  24.031414,  24.973822,  25.91623 ,  26.858639,  27.801047,\n        28.743455,  29.685864,  30.628272,  31.570681,  32.513089,  33.455497,\n        34.397906,  35.340314,  36.282723,  37.225131,  38.167539,  39.109948,\n        40.052356,  40.994764,  41.937173,  42.879581,  43.82199 ,  44.764398,\n        45.706806,  46.649215,  47.591623,  48.534031,  49.47644 ,  50.418848,\n        51.361257,  52.303665,  53.246073,  54.188482,  55.13089 ,  56.073298,\n        57.015707,  57.958115,  58.900524,  59.842932,  60.78534 ,  61.727749,\n        62.670157,  63.612565,  64.554974,  65.497382,  66.439791,  67.382199,\n        68.324607,  69.267016,  70.209424,  71.151832,  72.094241,  73.036649,\n        73.979058,  74.921466,  75.863874,  76.806283,  77.748691,  78.691099,\n        79.633508,  80.575916,  81.518325,  82.460733,  83.403141,  84.34555 ,\n        85.287958,  86.230366,  87.172775,  88.115183,  89.057592,  90.      ])lon(lon)float640.0 1.25 2.5 ... 356.2 357.5 358.8axis :Xbounds :lon_bndsstandard_name :longitudetitle :Longitudetype :doubleunits :degrees_eastvalid_max :360.0valid_min :0.0array([  0.  ,   1.25,   2.5 , ..., 356.25, 357.5 , 358.75], shape=(288,))time(time)object1920-01-01 00:00:00 ... 1929-12-...axis :Tbounds :time_bndsstandard_name :timetitle :timetype :doublearray([cftime.DatetimeNoLeap(1920, 1, 1, 0, 0, 0, 0, has_year_zero=True),\n       cftime.DatetimeNoLeap(1920, 1, 2, 0, 0, 0, 0, has_year_zero=True),\n       cftime.DatetimeNoLeap(1920, 1, 3, 0, 0, 0, 0, has_year_zero=True), ...,\n       cftime.DatetimeNoLeap(1929, 12, 29, 0, 0, 0, 0, has_year_zero=True),\n       cftime.DatetimeNoLeap(1929, 12, 30, 0, 0, 0, 0, has_year_zero=True),\n       cftime.DatetimeNoLeap(1929, 12, 31, 0, 0, 0, 0, has_year_zero=True)],\n      shape=(3650,), dtype=object)Data variables: (4)time_bnds(time, nbnd)object...[7300 values with dtype=object]lat_bnds(lat, nbnd)float32...units :degrees_north[384 values with dtype=float32]lon_bnds(lon, nbnd)float32...units :degrees_east[576 values with dtype=float32]tas(time, lat, lon)float32ManifestArray&lt;shape=(3650, 192, ..._FillValue :AAAAgB2vFUQ=cell_measures :area: areacellacell_methods :area: time: meancomment :near-surface (usually, 2 meter) air temperaturecoordinates :time lat londescription :near-surface (usually, 2 meter) air temperaturefrequency :dayid :taslong_name :Near-Surface Air TemperaturemipTable :daymissing_value :1e+20out_name :tasprov :day ((isd.003))realm :atmosstandard_name :air_temperaturetime :timetime_label :time-meantime_title :Temporal meantitle :Near-Surface Air Temperaturetype :realunits :Kvariable_id :tasManifestArray&lt;shape=(3650, 192, 288), dtype=float32, chunks=(1, 192, 288)&gt;Indexes: (3)latPandasIndexPandasIndex(Index([             -90.0, -89.05759162303664,  -88.1151832460733,\n       -87.17277486910994,  -86.2303664921466, -85.28795811518324,\n        -84.3455497382199, -83.40314136125654, -82.46073298429319,\n       -81.51832460732984,\n       ...\n        81.51832460732984,   82.4607329842932,  83.40314136125653,\n        84.34554973821989,  85.28795811518324,   86.2303664921466,\n        87.17277486910996,  88.11518324607329,  89.05759162303664,\n                     90.0],\n      dtype='float64', name='lat', length=192))lonPandasIndexPandasIndex(Index([   0.0,   1.25,    2.5,   3.75,    5.0,   6.25,    7.5,   8.75,   10.0,\n        11.25,\n       ...\n        347.5, 348.75,  350.0, 351.25,  352.5, 353.75,  355.0, 356.25,  357.5,\n       358.75],\n      dtype='float64', name='lon', length=288))timePandasIndexPandasIndex(CFTimeIndex([1920-01-01 00:00:00, 1920-01-02 00:00:00, 1920-01-03 00:00:00,\n             1920-01-04 00:00:00, 1920-01-05 00:00:00, 1920-01-06 00:00:00,\n             1920-01-07 00:00:00, 1920-01-08 00:00:00, 1920-01-09 00:00:00,\n             1920-01-10 00:00:00,\n             ...\n             1929-12-22 00:00:00, 1929-12-23 00:00:00, 1929-12-24 00:00:00,\n             1929-12-25 00:00:00, 1929-12-26 00:00:00, 1929-12-27 00:00:00,\n             1929-12-28 00:00:00, 1929-12-29 00:00:00, 1929-12-30 00:00:00,\n             1929-12-31 00:00:00],\n            dtype='object', length=3650, calendar='noleap', freq='D'))Attributes: (45)Conventions :CF-1.7 CMIP-6.2activity_id :CMIPcase_id :17cesm_casename :b.e21.BHIST.f09_g17.CMIP6-historical.003contact :cesm_cmip6@ucar.educreation_date :2019-01-18T16:46:02Zdata_specs_version :01.00.29experiment :all-forcing simulation of the recent pastexperiment_id :historicalexternal_variables :areacellaforcing_index :1frequency :daygrid :native 0.9x1.25 finite volume grid (192x288 latxlon)grid_label :gninitialization_index :1institution :National Center for Atmospheric Research, Climate and Global Dynamics Laboratory, 1850 Table Mesa Drive, Boulder, CO 80305, USAinstitution_id :NCARlicense :CMIP6 model data produced by &lt;The National Center for Atmospheric Research&gt; is licensed under a Creative Commons Attribution-[]ShareAlike 4.0 International License (https://creativecommons.org/licenses/). Consult https://pcmdi.llnl.gov/CMIP6/TermsOfUse for terms of use governing CMIP6 output, including citation requirements and proper acknowledgment. Further information about this data, including some limitations, can be found via the further_info_url (recorded as a global attribute in this file)[]. The data producers and data providers make no warranty, either express or implied, including, but not limited to, warranties of merchantability and fitness for a particular purpose. All liabilities arising from the supply of the information (including any liability arising in negligence) are excluded to the fullest extent permitted by law.mip_era :CMIP6model_doi_url :https://doi.org/10.5065/D67H1H0Vnominal_resolution :100 kmparent_activity_id :CMIPparent_experiment_id :piControlparent_mip_era :CMIP6parent_source_id :CESM2parent_time_units :days since 0001-01-01 00:00:00parent_variant_label :r1i1p1f1physics_index :1product :model-outputrealization_index :3realm :atmossource :CESM2 (2017): atmosphere: CAM6 (0.9x1.25 finite volume grid; 288 x 192 longitude/latitude; 32 levels; top level 2.25 mb); ocean: POP2 (320x384 longitude/latitude; 60 levels; top grid cell 0-10 m); sea_ice: CICE5.1 (same grid as ocean); land: CLM5 0.9x1.25 finite volume grid; 288 x 192 longitude/latitude; 32 levels; top level 2.25 mb); aerosol: MAM4 (0.9x1.25 finite volume grid; 288 x 192 longitude/latitude; 32 levels; top level 2.25 mb); atmoschem: MAM4 (0.9x1.25 finite volume grid; 288 x 192 longitude/latitude; 32 levels; top level 2.25 mb); landIce: CISM2.1; ocnBgchem: MARBL (320x384 longitude/latitude; 60 levels; top grid cell 0-10 m)source_id :CESM2source_type :AOGCM BGCtable_id :daytracking_id :hdl:21.14100/51927b42-a61c-4086-86fa-9f6b761ac919variable_id :tasvariant_info :CMIP6 20th century experiments (1850-2014) with CAM6, interactive land (CLM5), coupled ocean (POP2) with biogeochemistry (MARBL), interactive sea ice (CICE5.1), and non-evolving land ice (CISM2.1)\nvariant_label :r3i1p1f1sub_experiment :nonesub_experiment_id :nonebranch_time_in_parent :240900.0branch_time_in_child :674885.0branch_method :standardfurther_info_url :https://furtherinfo.es-doc.org/CMIP6.NCAR.CESM2.historical.none.r3i1p1f1\n\n\n\n\nStep 6: Serialize as an (in-memory) Icechunk store\nUsually you’d want to use a persistent storage format, but let’s not waste disk space on an example.\n\nicechunk_store = icechunk.in_memory_storage()\nrepo = icechunk.Repository.create(icechunk_store)\nsession = repo.writable_session(\"main\")\nvds.vz.to_icechunk(session.store)\nsession.commit(\"Create virtual store\")\n\n'Y308PPAWNJ1Q054MB8JG'",
    "crumbs": [
      "Examples",
      "Hands on - NetCDFs from ESGF"
    ]
  }
]